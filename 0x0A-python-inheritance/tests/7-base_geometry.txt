`7-base_geometry` tests
========================

This document defines tests for the `BaseGeometry` class and its
methods from the module `7-base_geometry`

Import the class

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Testcases
=========
Create an object of type `BaseGeometry`

	>>> bg = BaseGeometry()

Test area method

	>>> bg.area()
	Traceback (most recent call last):
		...
	Exception: area() is not implemented

Test integer_validator method without arguments

	>>> bg.integer_validator()
	Traceback (most recent call last):
		...
	TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test integer_validator method with one argument

	>>> bg.integer_validator("width")
	Traceback (most recent call last):
		...
	TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Test integer_validator method with arguments

	>>> bg.integer_validator("width", 12)

Test str in-place of int for integer_validator

	>>> bg.integer_validator("width", "12")
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Test list in-place of int for integer_validator

	>>> bg.integer_validator("width", [])
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Test float in-place of int for integer_validator

	>>> bg.integer_validator("width", 3.0)
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Test NoneType in-place of int for integer_validator

	>>> bg.integer_validator("width", None)
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Test dict in-place of int for integer_validator

	>>> bg.integer_validator("width", {2, 4})
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Test tuple in-place of int for integer_validator

	>>> bg.integer_validator("width", (1, 2))
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Test Boolean in-place of int for integer_validator

	>>> bg.integer_validator("width", True)


Test negative integers in-place of int for integer_validator

	>>> bg.integer_validator("width", -21)
	Traceback (most recent call last):
		...
	ValueError: width must be greater than 0

Test zero in-place of int for integer_validator

	>>> bg.integer_validator("width", 0)
	Traceback (most recent call last):
		...
	ValueError: width must be greater than 0
