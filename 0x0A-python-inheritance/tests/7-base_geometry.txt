`7-base_geometry` tests
========================

This document defines tests for the `BaseGeometry` class and its
methods from the module `7-base_geometry`

Import the class

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Testcases
=========
Create an object of type `BaseGeometry`

	>>> bg = BaseGeometry()

Try area method

	>>> bg.area()
	Traceback (most recent call last):
		...
	Exception: area() is not implemented

Try integer_validator method

	>>> bg.integer_validator("width", 12)

Input str in-place of int for integer_validator

	>>> bg.integer_validator("width", "12")
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Input list in-place of int for integer_validator

	>>> bg.integer_validator("width", [])
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Input float in-place of int for integer_validator

	>>> bg.integer_validator("width", 3.0)
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Input NoneType in-place of int for integer_validator

	>>> bg.integer_validator("width", None)
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Input dict in-place of int for integer_validator

	>>> bg.integer_validator("width", {1, 2})
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Input tuple in-place of int for integer_validator

	>>> bg.integer_validator("width", (1, 2))
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

Test Boolean in place of int for integer_validator

	>>> bg.integer_validator("width", True)

Input negative integers in-place of int for integer_validator

	>>> bg.integer_validator("width", -21)
	Traceback (most recent call last):
		...
	ValueError: width must be greater than 0

Input zero in-place of int for integer_validator

	>>> bg.integer_validator("width", 0)
	Traceback (most recent call last):
		...
	ValueError: width must be greater than 0
